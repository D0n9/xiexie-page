/**
 * 计时器服务
 * 管理打卡时间、计时器和倒计时功能
 */

const TimerService = {
    // 计时器ID
    timerId: null,
    countdownId: null,
    workStartTime: null,
    workEndTime: null,
    workStatus: CONFIG.STATUS.IDLE,
    
    // 存储最后一次时间编辑的信息
    lastTimeEditInfo: null,
    
    /**
     * 初始化计时器服务
     */
    init() {
        console.log('计时器服务初始化开始');
        
        // 读取本地存储的工作状态
        let savedStatus = Store.get(CONFIG.STORAGE_KEYS.WORK_STATUS);
        if (savedStatus !== null && typeof savedStatus === 'number') {
            this.workStatus = savedStatus;
        } else {
            this.workStatus = CONFIG.STATUS.IDLE;
        }
        
        // 如果有上次的开始时间
        let startTimeStr = Store.get(CONFIG.STORAGE_KEYS.WORK_START_TIME);
        if (startTimeStr) {
            this.workStartTime = new Date(parseInt(startTimeStr, 10));
        }
        
        // 如果有上次的结束时间
        let endTimeStr = Store.get(CONFIG.STORAGE_KEYS.WORK_END_TIME);
        if (endTimeStr) {
            this.workEndTime = new Date(parseInt(endTimeStr, 10));
        }
        
        // 如果状态是工作中，但没有开始时间，重置状态
        if (this.workStatus === CONFIG.STATUS.WORKING && !this.workStartTime) {
            this.workStatus = CONFIG.STATUS.IDLE;
        }
        
        // 如果状态是已完成，但没有结束时间，重置状态
        if (this.workStatus === CONFIG.STATUS.COMPLETED && !this.workEndTime) {
            this.workStatus = CONFIG.STATUS.IDLE;
        }
        
        // 加载上次编辑的时间信息
        this.lastTimeEditInfo = Store.get(CONFIG.STORAGE_KEYS.TIME_EDITS) || null;
        
        // 每秒更新UI
        this.startTimeTracking();
        
        console.log('计时器服务初始化完成，当前状态:', this.workStatus);
    },
    
    /**
     * 开始计时
     */
    startTimer() {
        // 立即更新一次已经过的时间
        const now = new Date();
        const elapsed = now - this.workStartTime;
        document.getElementById('time-display').textContent = Utils.formatDuration(elapsed);
        
        // 设置定时器，每秒更新一次
        this.timerId = setInterval(() => {
            this.updateElapsedTime();
        }, CONFIG.TIMER_INTERVAL);
    },
    
    /**
     * 更新已经过的时间显示
     */
    updateElapsedTime() {
        // 获取当天总工作时长（包括当前会话和历史记录）
        const totalWorkDuration = this.calculateTodayWorkDuration();
        
        // 将总工作时长转换为毫秒格式以用于显示（小时和分钟）
        let totalWorkMs = (totalWorkDuration.hours * 3600 + totalWorkDuration.minutes * 60) * 1000;
        
        // 如果当前正在工作中，加上当前会话的秒数以保持秒位更新
        if (this.workStatus === CONFIG.STATUS.WORKING && this.workStartTime) {
            const now = new Date();
            const currentSessionMs = now - this.workStartTime;
            
            // 计算当前会话时间的秒数部分（不包括整分钟）
            const currentSessionSeconds = Math.floor((currentSessionMs / 1000) % 60);
            
            // 将秒数加入到总时长中
            totalWorkMs += currentSessionSeconds * 1000;
        } 
        // 已下班状态 - 时间应该固定不变，不再更新秒数
        
        // 更新圆圈中的时间显示为总工作时长
        document.getElementById('time-display').textContent = Utils.formatDuration(totalWorkMs);
    },
    
    /**
     * 停止计时器
     */
    stopTimer() {
        if (this.timerId) {
            clearInterval(this.timerId);
            this.timerId = null;
        }
    },
    
    /**
     * 上班打卡
     */
    clockIn() {
        // 如果当前状态是已下班，先重置工作会话
        if (this.workStatus === CONFIG.STATUS.COMPLETED) {
            this.resetWorkSession();
        }
        
        // 创建上班时间并保存
        this.workStartTime = new Date();
        this.workStatus = CONFIG.STATUS.WORKING;
        
        // 保存到本地存储
        Store.saveWorkStartTime(this.workStartTime);
        Store.saveWorkStatus(this.workStatus);
        
        // 启动计时器
        this.startTimer();
        
        // 启动倒计时
        this.startCountdown();
        
        // 返回上班时间以便UI更新
        return this.workStartTime;
    },
    
    /**
     * 重置工作会话
     * 在同一天内开始新的工作会话时调用
     */
    resetWorkSession() {
        console.log('重置工作会话开始');
        
        // 停止计时器和倒计时
        this.stopTimer();
        this.stopCountdown();
        
        // 重置工作开始和结束时间
        this.workStartTime = null;
        this.workEndTime = null;
        
        // 先将状态设为IDLE，以便UI正确更新
        this.workStatus = CONFIG.STATUS.IDLE;
        
        // 清除本地存储中的当前会话数据
        console.log('清除当前会话数据，重置状态为IDLE');
        Store.save(CONFIG.STORAGE_KEYS.WORK_START_TIME, null);
        Store.save(CONFIG.STORAGE_KEYS.WORK_END_TIME, null);
        Store.save(CONFIG.STORAGE_KEYS.WORK_STATUS, CONFIG.STATUS.IDLE);
        
        // 验证状态是否正确保存
        const savedStatus = Store.getWorkStatus();
        if (savedStatus !== CONFIG.STATUS.IDLE) {
            console.error('状态重置失败，重试...');
            // 重试一次
            Store.saveWorkStatus(CONFIG.STATUS.IDLE);
        }
        
        console.log('重置工作会话完成，当前状态:', this.workStatus);
    },
    
    /**
     * 下班打卡
     */
    clockOut() {
        // 如果没有上班时间，不能下班打卡
        if (!this.workStartTime) {
            console.error('无法下班打卡：缺少上班时间');
            return null;
        }
        
        // 创建下班时间并保存
        this.workEndTime = new Date();
        this.workStatus = CONFIG.STATUS.COMPLETED;
        
        // 保存到本地存储
        Store.saveWorkEndTime(this.workEndTime);
        Store.saveWorkStatus(this.workStatus);
        
        // 验证数据是否成功保存
        const savedEndTime = Store.getWorkEndTime();
        const savedStatus = Store.getWorkStatus();
        
        if (!savedEndTime || savedStatus !== CONFIG.STATUS.COMPLETED) {
            console.error('下班打卡数据保存异常，尝试重新保存');
            // 重试一次
            Store.saveWorkEndTime(this.workEndTime);
            Store.saveWorkStatus(this.workStatus);
        }
        
        // 停止倒计时
        this.stopCountdown();
        
        // 计算并保存今日工作记录
        this.saveWorkRecord();
        
        // 更新显示最终工作时间
        this.updateElapsedTime();
        
        // 在下班状态，应该停止计时器，因为不需要更新秒数
        this.stopTimer();
        
        console.log('成功下班打卡，状态已更新为：', this.workStatus);
        
        // 返回下班时间以便UI更新
        return this.workEndTime;
    },
    
    /**
     * 保存工作记录
     */
    saveWorkRecord() {
        if (!this.workStartTime || !this.workEndTime) return;
        
        const dateStr = Utils.formatDate(this.workStartTime);
        
        // 获取上下班时间之间的原始时间差
        const rawDiff = Utils.calculateTimeDifference(this.workStartTime, this.workEndTime);
        const rawTotalMinutes = rawDiff.hours * 60 + rawDiff.minutes;
        
        // 计算标准工作时长和上下班间隔中的午休时间
        const expectedDuration = this.calculateExpectedWorkDuration();
        const expectedWorkMinutes = expectedDuration.hours * 60 + expectedDuration.minutes;
        
        // 从上下班设置计算实际上班下班之间的总时间（包含午休）
        const startDate = new Date();
        startDate.setHours(CONFIG.WORK_HOURS.START_HOUR, CONFIG.WORK_HOURS.START_MINUTE, 0, 0);
        
        const endDate = new Date();
        endDate.setHours(CONFIG.WORK_HOURS.END_HOUR, CONFIG.WORK_HOURS.END_MINUTE, 0, 0);
        
        // 如果跨天，调整结束时间
        if (endDate < startDate) {
            endDate.setDate(endDate.getDate() + 1);
        }
        
        // 计算标准上下班之间的总分钟数
        const standardTotalDiff = Utils.calculateTimeDifference(startDate, endDate);
        const standardTotalMinutes = standardTotalDiff.hours * 60 + standardTotalDiff.minutes;
        
        // 计算标准午休时间（分钟）
        const standardBreakMinutes = standardTotalMinutes - expectedWorkMinutes;
        
        // 计算实际工作时间，从原始时间差中减去午休时间
        // 但需要检查实际工作时间是否短于标准工作时间，如果是则不减去全部午休时间
        let actualWorkMinutes = rawTotalMinutes;
        
        // 只有当原始时间差超过标准午休时间，才减去午休时间
        if (rawTotalMinutes > standardBreakMinutes) {
            actualWorkMinutes = rawTotalMinutes - standardBreakMinutes;
        }
        
        // 转换为小时和分钟
        const workHours = Math.floor(actualWorkMinutes / 60);
        const workMinutes = actualWorkMinutes % 60;
        
        // 计算加班时间
        let overtimeHours = 0;
        let overtimeMinutes = 0;
        
        if (actualWorkMinutes > expectedWorkMinutes) {
            const overtimeTotalMinutes = actualWorkMinutes - expectedWorkMinutes;
            overtimeHours = Math.floor(overtimeTotalMinutes / 60);
            overtimeMinutes = overtimeTotalMinutes % 60;
        }
        
        // 创建工作记录 - 确保状态为已完成
        const record = {
            startTime: this.workStartTime.getTime(),
            endTime: this.workEndTime.getTime(),
            workHours: workHours,
            workMinutes: workMinutes,
            overtimeHours,
            overtimeMinutes,
            rawHours: rawDiff.hours,        // 保存原始时间差，用于调试
            rawMinutes: rawDiff.minutes,    // 保存原始时间差，用于调试
            breakMinutes: standardBreakMinutes, // 保存午休时间，用于显示
            status: CONFIG.STATUS.COMPLETED  // 显式设置为已完成状态
        };
        
        // 保存到本地存储
        Store.saveDailyRecord(dateStr, record);
        
        // 再次确认工作状态已保存
        this.workStatus = CONFIG.STATUS.COMPLETED;
        Store.saveWorkStatus(this.workStatus);
    },
    
    /**
     * 开始倒计时
     */
    startCountdown() {
        // 立即更新一次倒计时
        this.updateCountdown();
        
        // 设置定时器，每秒更新一次
        this.countdownId = setInterval(() => {
            this.updateCountdown();
        }, CONFIG.TIMER_INTERVAL); // 每秒更新一次倒计时
    },
    
    /**
     * 更新倒计时显示
     */
    updateCountdown() {
        if (!this.workStartTime || this.workStatus !== CONFIG.STATUS.WORKING) return;
        
        const now = new Date();
        const endOfWorkDay = new Date(now);
        
        // 设置标准下班时间
        endOfWorkDay.setHours(CONFIG.WORK_HOURS.END_HOUR, CONFIG.WORK_HOURS.END_MINUTE, 0, 0);
        
        // 如果当前时间已经超过下班时间，显示加班信息
        if (now >= endOfWorkDay) {
            const overtime = Utils.calculateTimeDifference(endOfWorkDay, now);
            document.getElementById('countdown-display').textContent = '加班中';
            document.getElementById('countdown-message').textContent = 
                `已加班 ${overtime.hours}小时${overtime.minutes}分钟${overtime.seconds}秒`;
            
            // 添加加班样式
            document.getElementById('countdown-display').classList.add('overtime-status');
        } else {
            // 计算剩余时间（包括秒数）
            const diffMs = endOfWorkDay - now;
            const hours = Math.floor(diffMs / (1000 * 60 * 60));
            const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((diffMs % (1000 * 60)) / 1000);
            
            // 格式化显示
            document.getElementById('countdown-display').textContent = 
                `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            document.getElementById('countdown-message').textContent = '距离下班还有';
            
            // 移除加班样式
            document.getElementById('countdown-display').classList.remove('overtime-status');
        }
    },
    
    /**
     * 停止倒计时
     */
    stopCountdown() {
        if (this.countdownId) {
            clearInterval(this.countdownId);
            this.countdownId = null;
        }
    },
    
    /**
     * 计算今日工作时长
     * @returns {Object} 工作时长对象，包含小时和分钟
     */
    calculateTodayWorkDuration() {
        // 获取今日已保存的工作记录
        const today = new Date();
        const dateStr = Utils.formatDate(today);
        const todayRecords = Store.getDailyRecord(dateStr);
        
        let totalMinutes = 0;
        
        // 如果有历史记录，计算历史记录的总时长
        if (todayRecords) {
            // 处理记录为数组的情况
            if (Array.isArray(todayRecords)) {
                todayRecords.forEach(record => {
                    // 使用已经保存在记录中的工作时长，这已经考虑了午休时间
                    totalMinutes += record.workHours * 60 + record.workMinutes;
                });
            } else {
                // 处理单个记录的情况
                totalMinutes += todayRecords.workHours * 60 + todayRecords.workMinutes;
            }
        }
        
        // 特殊处理: 如果当前有活动的工作会话，且不在已保存的记录中，则添加当前会话的时间
        if (this.workStatus === CONFIG.STATUS.WORKING && this.workStartTime) {
            // 确保这个会话是今天的
            const sessionDateStr = Utils.formatDate(this.workStartTime);
            if (sessionDateStr === dateStr) {
                // 检查当前会话是否已经包含在保存的记录中
                let sessionAlreadyCounted = false;
                
                if (todayRecords) {
                    // 判断当前会话是否已经在记录中被计算
                    if (Array.isArray(todayRecords)) {
                        sessionAlreadyCounted = todayRecords.some(record => {
                            const startTimeDiff = Math.abs(record.startTime - this.workStartTime.getTime());
                            return startTimeDiff < 60000; // 如果在一分钟内，认为是同一会话
                        });
                    } else {
                        const startTimeDiff = Math.abs(todayRecords.startTime - this.workStartTime.getTime());
                        sessionAlreadyCounted = startTimeDiff < 60000;
                    }
                }
                
                // 如果当前会话尚未被计算，加上当前会话的时间
                if (!sessionAlreadyCounted) {
                    // 直接使用计算当前会话的方法，它会考虑午休时间
                    const currentSession = this.calculateCurrentSessionDuration();
                    totalMinutes += currentSession.hours * 60 + currentSession.minutes;
                }
            }
        }
        
        // 转换为小时和分钟
        const hours = Math.floor(totalMinutes / 60);
        const minutes = totalMinutes % 60;
        
        return { hours, minutes };
    },
    
    /**
     * 计算今日加班时长
     * @returns {Object} 加班时长对象，包含小时和分钟
     */
    calculateTodayOvertime() {
        const duration = this.calculateTodayWorkDuration();
        const expectedDuration = this.calculateExpectedWorkDuration();
        
        // 计算总分钟数
        const totalWorkMinutes = duration.hours * 60 + duration.minutes;
        const expectedWorkMinutes = expectedDuration.hours * 60 + expectedDuration.minutes;
        
        // 计算加班时间（分钟）
        let overtimeMinutes = 0;
        
        if (totalWorkMinutes > expectedWorkMinutes) {
            overtimeMinutes = totalWorkMinutes - expectedWorkMinutes;
        }
        
        // 转换为小时和分钟
        const overtimeHours = Math.floor(overtimeMinutes / 60);
        const overtimeMinutesRemainder = overtimeMinutes % 60;
        
        return { hours: overtimeHours, minutes: overtimeMinutesRemainder };
    },
    
    /**
     * 重置当天的工作状态
     * 通常在新的一天启动时调用
     */
    resetDailyStatus() {
        this.stopTimer();
        this.stopCountdown();
        
        this.workStartTime = null;
        this.workEndTime = null;
        this.workStatus = CONFIG.STATUS.IDLE;
        
        // 清除本地存储中的当天数据
        Store.clearTodayData();
    },
    
    /**
     * 更新上班时间
     * @param {Date} newStartTime - 新的上班时间
     */
    updateWorkStartTime(newStartTime) {
        // 更新内存中的上班时间
        this.workStartTime = newStartTime;
        
        // 保存到本地存储
        Store.saveWorkStartTime(this.workStartTime);
        
        // 更新显示
        this.updateElapsedTime();
        
        // 如果当前状态是工作中，重新启动计时器
        if (this.workStatus === CONFIG.STATUS.WORKING) {
            // 重启计时器以使用新的上班时间
            this.stopTimer();
            this.startTimer();
        }
    },
    
    /**
     * 更新下班时间
     * @param {Date} newEndTime - 新的下班时间
     */
    updateWorkEndTime(newEndTime) {
        // 更新内存中的下班时间
        this.workEndTime = newEndTime;
        
        // 保存到本地存储
        Store.saveWorkEndTime(this.workEndTime);
        
        // 更新显示
        this.updateElapsedTime();
    },
    
    /**
     * 重新计算工作记录
     * 在手动修改上班/下班时间后调用
     */
    recalculateWorkRecord() {
        // 如果没有上班时间，无法计算
        if (!this.workStartTime) return;
        
        // 获取日期字符串（从上班时间获取）
        const dateStr = Utils.formatDate(this.workStartTime);
        
        // 如果当前状态为已下班，且有下班时间，重新计算并保存记录
        if (this.workStatus === CONFIG.STATUS.COMPLETED && this.workEndTime) {
            // 确保状态保存正确
            Store.saveWorkStatus(this.workStatus);
            
            // 获取上下班时间之间的原始时间差
            const rawDiff = Utils.calculateTimeDifference(this.workStartTime, this.workEndTime);
            const rawTotalMinutes = rawDiff.hours * 60 + rawDiff.minutes;
            
            // 计算标准工作时长和上下班间隔中的午休时间
            const expectedDuration = this.calculateExpectedWorkDuration();
            const expectedWorkMinutes = expectedDuration.hours * 60 + expectedDuration.minutes;
            
            // 从上下班设置计算实际上班下班之间的总时间（包含午休）
            const startDate = new Date();
            startDate.setHours(CONFIG.WORK_HOURS.START_HOUR, CONFIG.WORK_HOURS.START_MINUTE, 0, 0);
            
            const endDate = new Date();
            endDate.setHours(CONFIG.WORK_HOURS.END_HOUR, CONFIG.WORK_HOURS.END_MINUTE, 0, 0);
            
            // 如果跨天，调整结束时间
            if (endDate < startDate) {
                endDate.setDate(endDate.getDate() + 1);
            }
            
            // 计算标准上下班之间的总分钟数
            const standardTotalDiff = Utils.calculateTimeDifference(startDate, endDate);
            const standardTotalMinutes = standardTotalDiff.hours * 60 + standardTotalDiff.minutes;
            
            // 计算标准午休时间（分钟）
            const standardBreakMinutes = standardTotalMinutes - expectedWorkMinutes;
            
            // 计算实际工作时间，从原始时间差中减去午休时间
            // 但需要检查实际工作时间是否短于标准工作时间，如果是则不减去全部午休时间
            let actualWorkMinutes = rawTotalMinutes;
            
            // 只有当原始时间差超过标准午休时间，才减去午休时间
            if (rawTotalMinutes > standardBreakMinutes) {
                actualWorkMinutes = rawTotalMinutes - standardBreakMinutes;
            }
            
            // 转换为小时和分钟
            const workHours = Math.floor(actualWorkMinutes / 60);
            const workMinutes = actualWorkMinutes % 60;
            
            // 计算加班时间
            let overtimeHours = 0;
            let overtimeMinutes = 0;
            
            if (actualWorkMinutes > expectedWorkMinutes) {
                const overtimeTotalMinutes = actualWorkMinutes - expectedWorkMinutes;
                overtimeHours = Math.floor(overtimeTotalMinutes / 60);
                overtimeMinutes = overtimeTotalMinutes % 60;
            }
            
            // 创建工作记录
            const record = {
                startTime: this.workStartTime.getTime(),
                endTime: this.workEndTime.getTime(),
                workHours: workHours,
                workMinutes: workMinutes,
                overtimeHours,
                overtimeMinutes,
                rawHours: rawDiff.hours,        // 保存原始时间差，用于调试
                rawMinutes: rawDiff.minutes,    // 保存原始时间差，用于调试
                breakMinutes: standardBreakMinutes, // 保存午休时间，用于显示
                status: this.workStatus,
                editedManually: true // 标记为手动编辑
            };
            
            // 保存到本地存储（覆盖当天最后一条记录）
            const todayRecords = Store.getDailyRecord(dateStr);
            
            if (todayRecords) {
                if (Array.isArray(todayRecords)) {
                    // 查找当前会话的记录并更新，而不是添加新记录
                    let sessionUpdated = false;
                    const currentSessionStartTime = this.workStartTime.getTime();
                    const currentSessionEndTime = this.workEndTime.getTime();
                    
                    // 更新所有与当前编辑的时间段有重叠的记录
                    const updatedRecords = todayRecords.filter(rec => {
                        // 判断是否与当前编辑的时间段有重叠
                        const overlap = (
                            // 记录开始时间在当前会话时间范围内
                            (rec.startTime >= currentSessionStartTime - 3600000 && rec.startTime <= currentSessionEndTime + 3600000) ||
                            // 记录结束时间在当前会话时间范围内
                            (rec.endTime >= currentSessionStartTime - 3600000 && rec.endTime <= currentSessionEndTime + 3600000) ||
                            // 当前会话时间范围完全包含在记录时间内
                            (currentSessionStartTime >= rec.startTime && currentSessionEndTime <= rec.endTime)
                        );
                        
                        // 如果没有重叠，保留该记录
                        return !overlap;
                    });
                    
                    // 添加更新后的记录
                    updatedRecords.push(record);
                    
                    // 按开始时间排序
                    updatedRecords.sort((a, b) => a.startTime - b.startTime);
                    
                    // 保存更新后的记录
                    Store.save(CONFIG.STORAGE_KEYS.DAILY_RECORDS, {
                        ...Store.getAllRecords(),
                        [dateStr]: updatedRecords
                    });
                    
                    console.log('更新工作记录，合并重叠时间段，新记录总数:', updatedRecords.length);
                } else {
                    // 单条记录情况，直接替换
                    Store.saveDailyRecord(dateStr, record);
                }
            } else {
                // 没有记录，直接保存
                Store.saveDailyRecord(dateStr, record);
            }
        } else if (this.workStatus === CONFIG.STATUS.WORKING) {
            // 正在工作中状态下编辑时间
            // 查找当前工作日的所有记录
            const todayRecords = Store.getDailyRecord(dateStr);
            
            // 如果存在之前的记录，检查是否需要合并
            if (todayRecords && Array.isArray(todayRecords)) {
                // 记录更新标志
                let recordsNeedUpdate = false;
                
                // 查找并移除任何标记为"正在工作中"的记录
                // 这些可能是之前未正确关闭的会话
                const filteredRecords = todayRecords.filter(rec => {
                    if (rec.status === CONFIG.STATUS.WORKING) {
                        recordsNeedUpdate = true;
                        return false; // 移除工作中的记录
                    }
                    return true;
                });
                
                // 如果进行了更新，保存修改后的记录
                if (recordsNeedUpdate) {
                    Store.save(CONFIG.STORAGE_KEYS.DAILY_RECORDS, {
                        ...Store.getAllRecords(),
                        [dateStr]: filteredRecords
                    });
                    console.log('已清理未完成的工作记录');
                }
            }
        }
    },
    
    /**
     * 计算当前会话的工作时长
     * 与calculateTodayWorkDuration不同，此方法只计算当前会话的时长，不包括历史记录
     * @returns {Object} 工作时长对象，包含小时和分钟
     */
    calculateCurrentSessionDuration() {
        if (!this.workStartTime) return { hours: 0, minutes: 0 };
        
        const endTime = this.workStatus === CONFIG.STATUS.COMPLETED ? 
            this.workEndTime : new Date();
            
        // 获取当前会话的原始时间差
        const rawDiff = Utils.calculateTimeDifference(this.workStartTime, endTime);
        const rawTotalMinutes = rawDiff.hours * 60 + rawDiff.minutes;
        
        // 计算标准工作时长和午休时间
        const expectedDuration = this.calculateExpectedWorkDuration();
        const expectedWorkMinutes = expectedDuration.hours * 60 + expectedDuration.minutes;
        
        // 从上下班设置计算实际上班下班之间的总时间（包含午休）
        const startDate = new Date();
        startDate.setHours(CONFIG.WORK_HOURS.START_HOUR, CONFIG.WORK_HOURS.START_MINUTE, 0, 0);
        
        const endDate = new Date();
        endDate.setHours(CONFIG.WORK_HOURS.END_HOUR, CONFIG.WORK_HOURS.END_MINUTE, 0, 0);
        
        // 如果跨天，调整结束时间
        if (endDate < startDate) {
            endDate.setDate(endDate.getDate() + 1);
        }
        
        // 计算标准上下班之间的总分钟数
        const standardTotalDiff = Utils.calculateTimeDifference(startDate, endDate);
        const standardTotalMinutes = standardTotalDiff.hours * 60 + standardTotalDiff.minutes;
        
        // 计算标准午休时间（分钟）
        const standardBreakMinutes = standardTotalMinutes - expectedWorkMinutes;
        
        // 计算实际工作时间，从原始时间差中减去午休时间
        let actualWorkMinutes = rawTotalMinutes;
        
        // 只有当原始时间差超过标准午休时间，才减去午休时间
        if (rawTotalMinutes > standardBreakMinutes) {
            actualWorkMinutes = rawTotalMinutes - standardBreakMinutes;
        }
        
        // 转换为小时和分钟
        const hours = Math.floor(actualWorkMinutes / 60);
        const minutes = actualWorkMinutes % 60;
        
        return { hours, minutes };
    },
    
    /**
     * 计算标准工作时长
     * 根据设置的标准上下班时间计算正常工作时长，考虑午休等非工作时间
     * @returns {Object} 工作时长对象，包含小时和分钟
     */
    calculateExpectedWorkDuration() {
        return {
            hours: CONFIG.STANDARD_WORK_HOURS,
            minutes: 0
        };
    },

    /**
     * 获取当前工作状态
     * @returns {Number} 工作状态（CONFIG.STATUS中的值）
     */
    getWorkStatus() {
        return this.workStatus;
    },

    /**
     * 开始时间追踪（每秒更新UI）
     */
    startTimeTracking() {
        // 清除任何现有的定时器
        if (this.timerId) {
            clearInterval(this.timerId);
        }
        
        // 设置每秒更新UI的定时器
        this.timerId = setInterval(() => {
            // 如果当前状态是工作中，更新计时显示
            if (this.workStatus === CONFIG.STATUS.WORKING) {
                this.updateElapsedTime();
                
                // 如果设置了倒计时，更新倒计时
                if (this.countdownId) {
                    this.updateCountdown();
                }
            }
        }, CONFIG.TIMER_INTERVAL);
        
        // 初始更新UI
        this.updateElapsedTime();
        
        // 如果是工作中状态，启动倒计时
        if (this.workStatus === CONFIG.STATUS.WORKING) {
            this.startCountdown();
        }
    },
}; 